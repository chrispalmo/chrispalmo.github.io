<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typescript on Chris Palmieri</title>
    <link>/tags/typescript/</link>
    <description>Recent content in Typescript on Chris Palmieri</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 May 2022 09:21:22 +1000</lastBuildDate><atom:link href="/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Push or Pull State with React Context (useContext, useState, useRef, useCallback)</title>
      <link>/post/20220515-push-or-pull-state-react-context/</link>
      <pubDate>Sun, 15 May 2022 09:21:22 +1000</pubDate>
      
      <guid>/post/20220515-push-or-pull-state-react-context/</guid>
      <description>tldr: this CodeSandbox demonstrates a way to fetch state via a context only when required, eliminating unnecessary renders.
Overview The React Context API has made accessing state anywhere in the component tree (and writing clean code without prop drilling) easier than ever before.
This article:
 examines a typical pattern for sharing state using the Context API, and discusses performance implications of the above pattern, and proposes a simple modification using the useRef and useCallback hooks to eliminates unnecessary renders.</description>
    </item>
    
    <item>
      <title>Higher-Order Functional Components (HOCs) in React (with Typescript)</title>
      <link>/post/20220514-higher-order-components-hocs/</link>
      <pubDate>Sat, 14 May 2022 14:20:16 +1000</pubDate>
      
      <guid>/post/20220514-higher-order-components-hocs/</guid>
      <description>Higher-Order Components are &amp;ldquo;functions that take a component and return a new component&amp;rdquo;, and while they are not part of the React API, &amp;ldquo;they are a pattern that emerges from React&amp;rsquo;s compositional nature&amp;rdquo; (React docs).
HOCs can be used to avoid repeated code in many scenarios such as:
 showing a loader, while waiting for data, conditionally rendering components, managing common user-interactions states, providing components with specific styles, and more generally, providing a component with any prop.</description>
    </item>
    
    <item>
      <title>JS Gotchas with logical operators ||, &amp;&amp;, and ??</title>
      <link>/post/20211229-javascript-gotchas/</link>
      <pubDate>Wed, 29 Dec 2021 11:39:50 +1000</pubDate>
      
      <guid>/post/20211229-javascript-gotchas/</guid>
      <description>Javascript&amp;rsquo;s logical OR || and logical AND &amp;amp;&amp;amp; operators are useful in contexts other than creating if, else, while etc. statements, but there are some edge cases that that I see many devs (myself included) getting caught out by.
This article explores common pitfalls, and provides recommendations for:
 using ?? instead of || to define values with a default fallback, and using &amp;amp;&amp;amp; to conditionally render JSX components only when required props are defined.</description>
    </item>
    
  </channel>
</rss>
