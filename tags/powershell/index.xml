<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Powershell on Chris Palmieri</title>
    <link>/tags/powershell/</link>
    <description>Recent content in Powershell on Chris Palmieri</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 May 2022 09:21:22 +1000</lastBuildDate><atom:link href="/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Push or Pull State with React Context (useContext, useState, useRef, useCallback)</title>
      <link>/post/2022-05-15-push-or-pull-state-react-context/</link>
      <pubDate>Sun, 15 May 2022 09:21:22 +1000</pubDate>
      
      <guid>/post/2022-05-15-push-or-pull-state-react-context/</guid>
      <description>tldr: this CodeSandbox demonstrates a way to fetch state via a context only when required, eliminating unnecessary renders.
Overview The React Context API has made accessing state anywhere in the component tree (and writing clean code without prop drilling) easier than ever before.
This article:
 examines a typical pattern for sharing state using the Context API, and discusses performance implications of the above pattern, and proposes a simple modification using the useRef and useCallback hooks to eliminates unnecessary renders.</description>
    </item>
    
    <item>
      <title>Use powershell profiles like a pro</title>
      <link>/post/20200210-use-powershell-profile-like-a-pro/</link>
      <pubDate>Sun, 09 Feb 2020 20:31:46 +1000</pubDate>
      
      <guid>/post/20200210-use-powershell-profile-like-a-pro/</guid>
      <description>If you do any software development in a Windows environment, you&amp;rsquo;ll be spending enough time inside the Powershell (PS) console that it will be worth customizing the PS Profile to speed up your workflow.
The PS Profile is essentially a .ps1 script that is run whenever a new PS console is opened. Without going too deep into how a sysadmin might use it, the average developer will probably want to use it to quickly do a few basic things:</description>
    </item>
    
    <item>
      <title>Search Google from the powershell console</title>
      <link>/post/20200209-search-google-from-powershell/</link>
      <pubDate>Sun, 09 Feb 2020 18:09:03 +1000</pubDate>
      
      <guid>/post/20200209-search-google-from-powershell/</guid>
      <description>You may have seen people walking around with those awkwardEat; Sleep; Code; Repeat; brogrammer shirts. I don&amp;rsquo;t like them - between the many other things that developing software requires, when I actually sit down to write code the workflow would more accurately be described as Code; Compile; Google Error; Repeat;.
This short post explains how the below gg.ps1 Powershell script can increase your productivity by opening a chrome browser and executing a Google search straight from the Powershell console.</description>
    </item>
    
    <item>
      <title>Automating deployment of a Hugo website to Github Pages using powershell scripts</title>
      <link>/post/20200207-automating-deployment-hugo-github-pages/</link>
      <pubDate>Fri, 07 Feb 2020 15:12:54 +1000</pubDate>
      
      <guid>/post/20200207-automating-deployment-hugo-github-pages/</guid>
      <description>Overview The following article describes how this blog is automatically deployed. The technology stack for this blog is:
 Source content written within the Hugo framework (a static website generator written in the Go language. Hosted by GitHub Pages, directly from this repository which contains the website build (the source code is in a separate repository). Cloudflare for cached content delivery (along with many other things).  If the technology stack for your project is completely different, this article should still provide you with:</description>
    </item>
    
  </channel>
</rss>
