<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code &amp; Automation on Chris Palmieri</title>
    <link>/categories/code-automation/</link>
    <description>Recent content in Code &amp; Automation on Chris Palmieri</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 15 May 2022 09:21:22 +1000</lastBuildDate><atom:link href="/categories/code-automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Push or Pull State with React Context (useContext, useState, useRef, useCallback)</title>
      <link>/post/2022-05-15-push-or-pull-state-react-context/</link>
      <pubDate>Sun, 15 May 2022 09:21:22 +1000</pubDate>
      
      <guid>/post/2022-05-15-push-or-pull-state-react-context/</guid>
      <description>tldr: this CodeSandbox demonstrates a way to fetch state via a context only when required, eliminating unnecessary renders.
Overview The React Context API has made accessing state anywhere in the component tree (and writing clean code without prop drilling) easier than ever before.
This article:
 examines a typical pattern for sharing state using the Context API, and discusses performance implications of the above pattern, and proposes a simple modification using the useRef and useCallback hooks to eliminates unnecessary renders.</description>
    </item>
    
    <item>
      <title>Higher-Order Functional Components (HOCs) in React (with Typescript)</title>
      <link>/post/2022-05-14-higher-order-components-hocs/</link>
      <pubDate>Sat, 14 May 2022 14:20:16 +1000</pubDate>
      
      <guid>/post/2022-05-14-higher-order-components-hocs/</guid>
      <description>Higher-Order Components are &amp;ldquo;functions that take a component and return a new component&amp;rdquo;, and while they are not part of the React API, &amp;ldquo;they are a pattern that emerges from React&amp;rsquo;s compositional nature&amp;rdquo; (React docs).
HOCs can be used to avoid repeated code in many scenarios such as:
 showing a loader, while waiting for data, conditionally rendering components, managing common user-interactions states, providing components with specific styles, and more generally, providing a component with any prop.</description>
    </item>
    
    <item>
      <title>Streamline web automation development (Python &#43; Selenium)</title>
      <link>/post/20210701-streamline-web-automation-development-python-selenium/</link>
      <pubDate>Thu, 01 Jul 2021 13:47:07 +1000</pubDate>
      
      <guid>/post/20210701-streamline-web-automation-development-python-selenium/</guid>
      <description>tl;dr When using Python to write web scraping / general automation scripts, run Python using the -i flag preserve and interact with the latest state (i.e python -i script.py).
This let&amp;rsquo;s you avoid re-running the whole script every time a change is made.
Problem When developing a bot or web scraper that operates behind a login screen, development, testing, and debugging can take longer than you might expect. The process of write code --&amp;gt; test --&amp;gt; debug --&amp;gt; repeat hits a bottleneck every time the browser starts, pages load, login details are entered, the welcome page loads, and so on.</description>
    </item>
    
    <item>
      <title>Browser debugging with bookmarklets</title>
      <link>/post/20200907-browser-debugging-with-bookmarklets/</link>
      <pubDate>Mon, 07 Sep 2020 16:48:39 +1000</pubDate>
      
      <guid>/post/20200907-browser-debugging-with-bookmarklets/</guid>
      <description>tl;dr  Bookmarklet are browser bookmarks that, instead of linking to a web page, inject custom javascript into the current page. Here are a couple of bookmarklets I use regularly - to add them to your browser simply copy the minified code directly into the URL field for a new bookmark (remember to include the javascript: prefix).  Track current mouse coordinates Use the below script to display the current mouse coordinates in the current tab title:</description>
    </item>
    
    <item>
      <title>Build and manage Selenium web scrapers with Auto-Scrape</title>
      <link>/post/20200224-manage-selenium-web-scrapers-with-auto-scrape/</link>
      <pubDate>Sun, 23 Feb 2020 22:49:26 +1000</pubDate>
      
      <guid>/post/20200224-manage-selenium-web-scrapers-with-auto-scrape/</guid>
      <description>tldr: Auto-scrape let&amp;rsquo;s you focus on writing web scraping scripts, while it takes care of logging, data persistance, data presentation and data export, all through a modern browser-based UI. It can be run locally or deployed remotely.
 Here are some screencasts of the UI. Get it on Github.  Why scrape the web? Building a Selenium web scraper is almost a rite of passage for programmers starting out. Watching a computer fill out forms, click links and collect data before your eyes is not only a highly satisfying and suitably non-abstract exercise for beginners to complete - browser automation forms a foundation for frontend testing, can be used for automated research, and of course can be used to replace those expensive and unreliable humans to accomplish a wide range of business-related tasks.</description>
    </item>
    
    <item>
      <title>Human-readable time intervals in Python</title>
      <link>/post/20200218-human-readable-time-intervals-python/</link>
      <pubDate>Tue, 18 Feb 2020 14:49:56 +1000</pubDate>
      
      <guid>/post/20200218-human-readable-time-intervals-python/</guid>
      <description>Expressing time intervals in a format that is readable by humans is an old problem that every frontend developer will eventually face. While there are plenty of solutions available (this one is my favourite), I required a function that could provide different levels of granularity in it&amp;rsquo;s &amp;ldquo;human-readable&amp;rdquo; description of time.
Take, for example, a component that tells the user how long in aggregate they have been using a service. If they have been using it for a few hours, it would be appropriate to display ## hours, ## minutes, ignoring the seconds and milliseconds.</description>
    </item>
    
    <item>
      <title>Convert SQL query to CSV file in Python</title>
      <link>/post/20200217-sql-to-csv-in-python/</link>
      <pubDate>Mon, 17 Feb 2020 16:17:10 +1000</pubDate>
      
      <guid>/post/20200217-sql-to-csv-in-python/</guid>
      <description>This function takes an SQLAlchemy query object as it&amp;rsquo;s input (SQLAlchemy is a popular Python SQL toolkit and Object Relational Mapper). It&amp;rsquo;s strength lies in not needing to hard-code column names, making it scaleable and suitable to &amp;ldquo;set-and-forget&amp;rdquo;.
While developing enterprise software, every developer has surely have been faced with a client asking &amp;ldquo;how do I get the data out of the system?&amp;rdquo;, and after digging a bit deeper, it becomes clear they want the ability to save a snapshot of data as an Excel spreadsheet.</description>
    </item>
    
    <item>
      <title>Use powershell profiles like a pro</title>
      <link>/post/20200210-use-powershell-profile-like-a-pro/</link>
      <pubDate>Sun, 09 Feb 2020 20:31:46 +1000</pubDate>
      
      <guid>/post/20200210-use-powershell-profile-like-a-pro/</guid>
      <description>If you do any software development in a Windows environment, you&amp;rsquo;ll be spending enough time inside the Powershell (PS) console that it will be worth customizing the PS Profile to speed up your workflow.
The PS Profile is essentially a .ps1 script that is run whenever a new PS console is opened. Without going too deep into how a sysadmin might use it, the average developer will probably want to use it to quickly do a few basic things:</description>
    </item>
    
    <item>
      <title>Search Google from the powershell console</title>
      <link>/post/20200209-search-google-from-powershell/</link>
      <pubDate>Sun, 09 Feb 2020 18:09:03 +1000</pubDate>
      
      <guid>/post/20200209-search-google-from-powershell/</guid>
      <description>You may have seen people walking around with those awkwardEat; Sleep; Code; Repeat; brogrammer shirts. I don&amp;rsquo;t like them - between the many other things that developing software requires, when I actually sit down to write code the workflow would more accurately be described as Code; Compile; Google Error; Repeat;.
This short post explains how the below gg.ps1 Powershell script can increase your productivity by opening a chrome browser and executing a Google search straight from the Powershell console.</description>
    </item>
    
    <item>
      <title>Automating deployment of a Hugo website to Github Pages using powershell scripts</title>
      <link>/post/20200207-automating-deployment-hugo-github-pages/</link>
      <pubDate>Fri, 07 Feb 2020 15:12:54 +1000</pubDate>
      
      <guid>/post/20200207-automating-deployment-hugo-github-pages/</guid>
      <description>Overview The following article describes how this blog is automatically deployed. The technology stack for this blog is:
 Source content written within the Hugo framework (a static website generator written in the Go language. Hosted by GitHub Pages, directly from this repository which contains the website build (the source code is in a separate repository). Cloudflare for cached content delivery (along with many other things).  If the technology stack for your project is completely different, this article should still provide you with:</description>
    </item>
    
  </channel>
</rss>
